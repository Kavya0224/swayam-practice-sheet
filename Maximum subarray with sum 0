class Solution {
  public:
    int maxLength(vector<int>& arr) {
    int n = arr.size();
    
    // Map to store the first occurrence of a prefix sum
    unordered_map<int, int> firstSeen; 
    
    int prefixSum = 0; // Running total of elements
    int maxLen = 0;    // Result: maximum length of subarray with sum 0

    // Initialize with prefix sum 0 at index -1 to handle subarrays starting at index 0
    firstSeen[0] = -1;

    for (int i = 0; i < n; i++) {
        prefixSum += arr[i]; // Update running sum

        // If this prefix sum has been seen before, there is a subarray with sum 0
        if (firstSeen.find(prefixSum) != firstSeen.end()) {
            int prevIndex = firstSeen[prefixSum]; // Index where this sum was first seen
            int length = i - prevIndex; // Length of the subarray
            maxLen = max(maxLen, length); // Update maximum length if needed
        }
        else {
            // Store the first occurrence of this prefix sum
            firstSeen[prefixSum] = i;
        }
    }

    return maxLen; // Return the maximum length found
}
};
