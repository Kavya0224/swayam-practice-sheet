#include <bits/stdc++.h> 
 void heapify(vector<int> &arr, int n, int i) {
        int largest = i;             // Initialize largest as root
        int left = 2 * i + 1;        // Left child index
        int right = 2 * i + 2;       // Right child index

        // If left child exists and is greater than root
        if (left < n && arr[left] > arr[largest]) {
            largest = left;
        }

        // If right child exists and is greater than current largest
        if (right < n && arr[right] > arr[largest]) {
            largest = right;
        }

        // If largest is not root, we need to swap and continue heapifying
        if (largest != i) {
            swap(arr[i], arr[largest]);   // Swap root with the largest child

            // Recursively heapify the affected subtree
            heapify(arr, n, largest);
        }
    }

vector<int> buildHeap(vector<int> arr, int n)
{
     // Start from the last non-leaf node and move upwards
        // (n - 2) / 2 gives the index of the last parent node
        for (int i = (n - 2) / 2; i >= 0; i--) {
            heapify(arr, n, i); // Heapify each node
        }

        // Return the array now organized as a max-heap
        return arr;
}
